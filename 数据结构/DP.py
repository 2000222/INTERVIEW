# coding:utf-8

# 动态规划 Dynamic Programming简称DP 如果要求一个问题的最优解 
# 而且这个问题可以分解成若干个子问题，并且子问题之间也存在重叠的子问题，则考虑使用动态规划

# 使用动态规划的特征
# 1 求一个问题的最优价
# 2 大问题可以分解成子问题，子问题还有重叠的更小的子问题
# 3 整体问题最优解取决于子问题的最优解(状态转移方程)
# 4 从上往下分析问题，从下往上解决问题
# 5 讨论底层的边界问题

def cut_repo(n):
    """
    剪绳子问题
    一根长度为N的绳子，请把绳子剪成M段（m n都是整数）每段绳子的长度记为k[0] k[1]...
    每段绳子的长度都是整数 请问如何剪使得绳子乘积最大
    n是绳子的长度
    """
    # 先对边界问题进行求解
    if n < 2:
        return 0
    if n ==  2:
        return 1 # 长度为2 只能剪成 1*1
    if n == 3:
        return 2
    
    # 如果绳子长于4则申请一个长度为50的数组
    
    h = [0 for i in range(50)]
    # 先罗列出切割的边界问题 如果绳子切割后的长度是2 这段绳子可以提供的最大的乘数就是2
    h[0] = 0
    h[1] = 1
    h[2] = 2
    h[3] = 3

    # 递归的问题是f(n) = max{f(i)*f(n-i)} 意为将n分成两段 使得这两段的乘积最大
    for i in range(4, n-1):
        maxs = 0
        for j in range(1, i/2+1):
            mult = h[j] * h[i-j]
            if maxs < mult:
                maxs = mult
            h[i] = maxs
    return h[n]